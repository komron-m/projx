// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package queries

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (fullname, email, enabled, attributes)
VALUES ($1, $2, $3, $4)
RETURNING id, email, fullname, enabled, attributes, created_at, updated_at
`

type CreateUserParams struct {
	Fullname   string      `json:"fullname"`
	Email      string      `json:"email"`
	Enabled    bool        `json:"enabled"`
	Attributes pgtype.JSON `json:"attributes"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Fullname,
		arg.Email,
		arg.Enabled,
		arg.Attributes,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Fullname,
		&i.Enabled,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, fullname, enabled, attributes, created_at, updated_at
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Fullname,
		&i.Enabled,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, fullname, enabled, attributes, created_at, updated_at
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Fullname,
		&i.Enabled,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, fullname, enabled, attributes, created_at, updated_at
FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUsers(ctx context.Context, arg *GetUsersParams) ([]*User, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Fullname,
			&i.Enabled,
			&i.Attributes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByIds = `-- name: GetUsersByIds :many
SELECT id, email, fullname, enabled, attributes, created_at, updated_at
FROM users
WHERE id = ANY ($1::uuid[])
ORDER BY id
`

func (q *Queries) GetUsersByIds(ctx context.Context, ids []uuid.UUID) ([]*User, error) {
	rows, err := q.db.Query(ctx, getUsersByIds, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Fullname,
			&i.Enabled,
			&i.Attributes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET fullname=$2,
    email=$3,
    enabled=$4,
    attributes=$5,
    updated_at=now()
WHERE id = $1
RETURNING id, email, fullname, enabled, attributes, created_at, updated_at
`

type UpdateUserParams struct {
	ID         uuid.UUID   `json:"id"`
	Fullname   string      `json:"fullname"`
	Email      string      `json:"email"`
	Enabled    bool        `json:"enabled"`
	Attributes pgtype.JSON `json:"attributes"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Fullname,
		arg.Email,
		arg.Enabled,
		arg.Attributes,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Fullname,
		&i.Enabled,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
